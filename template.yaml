AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  DankSpots

  Sample SAM Template for DankSpots
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
#https://dev.to/moesif/in-depth-guide-to-serverless-apis-with-aws-lambda-and-aws-api-gateway-part-2-3jh5 check this shit out!!!
Globals:
  Function:
    Timeout: 3

Resources:

  ServiceApi: 
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: 
        AllowMethods: "'DELETE,GET,OPTIONS,POST,PUT'"
        AllowHeaders: "'Access-Control-Allow-Headers, Access-Control-Allow-Origin, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'" 
        AllowOrigin: "'http://localhost:8100'"
        AllowCredentials: true
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        DefaultAuthorizer: DankCognitoAuthorizer
        Authorizers:
          DankCognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
  
  AddNewUserToTable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user
      Handler: handler.hello
      Runtime: nodejs12.x
      Events:
        CognitoUserPoolPostSignup:
          Type: Cognito
          Properties:
            UserPool:
              Ref: UserPool
            Trigger: SignUp

  GetAllPublicSpots:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SpotFunctions/
      Handler: handler.getAllPublicSpots
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 'SpotGeoTable'
      Layers: 
        - !Ref SpotLayer 
      Events:
        GetPublicSpots:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ServiceApi
            Path: /spot
            Method: get

  SavePublicSpot:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SpotFunctions/
      Handler: handler.savePublicSpot
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 'SpotGeoTable'
      Layers: 
        - !Ref SpotLayer 
      Events:
        SaveSpot:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ServiceApi
            Path: /spot
            Method: post

  getSpotsInCircle:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SpotFunctions/
      Handler: handler.getAllSpotsInCircle
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 'SpotGeoTable'
      Layers: 
        - !Ref SpotLayer 
      Events:
        GetSpotsInCircleEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ServiceApi
            Path: /spot/radial
            Method: get
  
  getSpotById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SpotFunctions/
      Handler: handler.getSpotById
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 'SpotGeoTable'
      Layers: 
        - !Ref SpotLayer 
      Events:
        GetSingleSpotEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ServiceApi
            Path: /spot/{hashKey}/{rangeKey}
            Method: get

  updateSpot:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SpotFunctions/
      Handler: handler.updateSpot
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 'SpotGeoTable'
      Layers: 
        - !Ref SpotLayer 
      Events:
        UpdateSpot:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ServiceApi
            Path: /spot
            Method: put

  deleteSpot:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SpotFunctions/
      Handler: handler.deleteSpot
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 'SpotGeoTable'
      Layers: 
        - !Ref SpotLayer 
      Events:
        DeleteSpot:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ServiceApi
            Path: /spot
            Method: delete
 
  SpotLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: spot-dependencies
      Description: Dependencies for spot functions
      ContentUri: LayerDependencies/SpotDependencies
      CompatibleRuntimes:
        - nodejs12.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  ImageLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: image-dependencies
      Description: Dependencies for images 
      ContentUri: LayerDependencies/Images
      CompatibleRuntimes:
        - nodejs12.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: DankUserPool
      Policies:
        PasswordPolicy: 
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: dank-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  dankimagebucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: dankimagebucket
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - HEAD
              - GET
              - PUT
              - POST
            AllowedOrigins:
              - "*"

  dankimagebucketPublicReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref dankimagebucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal: "*"
            Resource: !Join ["", ["arn:aws:s3:::", !Ref "dankimagebucket", "/*" ]]

  ImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ImageFunctions/
      Handler: handler.uploadImage
      Runtime: nodejs12.x
      Layers: 
        - !Ref ImageLayer
      Policies:
        - AmazonS3FullAccess
      Environment:
        Variables:
          IMAGE_BUCKET_NAME: !Ref dankimagebucket
      Events:
        CreateImage:
          Type: Api
          Properties:
            RestApiId: !Ref ServiceApi
            Path: /images
            Method: POST

Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for Dank Spots application"
    Value: !Sub "https://${ServiceApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/spot/"
#   HelloWorldFunction:
#     Description: "Hello World Lambda Function ARN"
#     Value: !GetAtt HelloWorldFunction.Arn
#   HelloWorldFunctionIamRole:
#     Description: "Implicit IAM Role created for Hello World function"
#     Value: !GetAtt HelloWorldFunctionRole.Arn
