AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  DankSpots

  Sample SAM Template for DankSpots
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
            
  GetAllPublicSpotsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SpotFunctions/
      Handler: handler.getAllPublicSpotsFunction
      Runtime: nodejs8.10
      Layers: 
        - !Ref SpotLayer 
      Events:
        GetSpots:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /spot
            Method: get

  SavePublicSpotFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SpotFunctions/
      Handler: handler.savePublicSpot
      Runtime: nodejs8.10
      Layers: 
        - !Ref SpotLayer 
      Events:
        GetSpots:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /spot
            Method: post

  SpotLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: spot-dependencies
      Description: Dependencies for spot functions
      ContentUri: LayerDependencies/SpotDependencies
      CompatibleRuntimes:
        - nodejs8.10
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  # ServiceApi: 
  #   DependsOn: UserPool
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     Name: ServiceApi
  #     Cors:
  #       AllowMethods: "'*'"
  #       AllowHeaders: "'*'"
  #       AllowOrigin: "'*'"
  #     Auth:
  #       Authorizers:
  #         CognitoAuthorizer:
  #           UserPoolArn: !GetAtt "UserPool.Arn"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: DankUserPool
      Policies:
        PasswordPolicy: 
          MinimumLength: 8

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: dank-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
